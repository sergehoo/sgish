"""
Django settings for smitci project.

Generated by 'django-admin startproject' using Django 4.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from datetime import datetime, timedelta
from pathlib import Path

from decouple import config
from django.conf import settings
from django.contrib import staticfiles
from django.contrib.auth import logout
from django.shortcuts import redirect

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-toc#mdj)1snmjab-u(nw%25x^u%7f&vix@n7*@$$d^x0fl-!99'
#
# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
#
# ALLOWED_HOSTS = ['https://smitci.com', 'smitci.com', 'www.smitci.com', 'http://smitci.com', '*']
# CSRF_TRUSTED_ORIGINS = ['https://smitci.com', 'http://smitci.com']
# CORS_ALLOWED_ORIGINS = [
#     'https://smitci.com', 'smitci.com', 'www.smitci.com', 'https://smitci.com'
# ]

SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = ['https://smitci.com', 'smitci.com', 'www.smitci.com', 'http://smitci.com', '*']
CSRF_TRUSTED_ORIGINS = ['https://smitci.com', 'http://smitci.com']
CORS_ALLOWED_ORIGINS = ['https://smitci.com', 'smitci.com', 'www.smitci.com', 'https://smitci.com']

# ALLOWED_HOSTS = ['154.56.60.195', 'smitci.com', 'www.smitci.com', 'localhost', '127.0.0.1']
# CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='https://smitci.com,https://www.smitci.com',
#                               cast=lambda v: [s.strip() for s in v.split(',')])
# CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='https://smitci.com,https://www.smitci.com',
#                               cast=lambda v: [s.strip() for s in v.split(',')])

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'static/logs', 'django_errors.log'),  # Adjusted path
        },
    },

    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.gis',
    "decouple",
    "django.contrib.sites",
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'smit',
    'fontawesomefree',
    'allauth',
    'allauth.account',
    'laboratory',
    'pharmacy',
    'hospitalisation',
    'django_humanize',
    'simple_history',
    'tinymce',
    'django_countries',
    'schedule',
    'dbbackup',
    'django_extensions',
    'django_unicorn',
    'core',
    'import_export',
    'django_filters',
    'guardian',
    'phonenumber_field',
    'django_user_agents',
    'django_tables2'

    # 'django_select2',

]

ASGI_APPLICATION = "smitci.asgi.application"

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Authentification classique
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
    'guardian.backends.ObjectPermissionBackend',  # Backend de permissions Guardian

)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Add the account middleware:
    "allauth.account.middleware.AccountMiddleware",
    'simple_history.middleware.HistoryRequestMiddleware',
    'smit.middlewares.SessionTimeoutMiddleware',
    'smit.middlewares.LogForbiddenMiddleware',
    'core.middleware.VisitCounterMiddleware',

]

ROOT_URLCONF = 'smitci.urls'

BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
                'smit.context_processors.services_processor',
                'smit.context_processors.menu_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'smitci.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# local
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'smit.sqlite3',
#     }
# }
# local one
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.contrib.gis.db.backends.postgis',
#         'NAME': 'smitciv2',
#         'USER': 'postgres',
#         'PASSWORD': 'weddingLIFE18',
#         'HOST': 'localhost',
#         'PORT': '5433',
#     }
# }
#prod
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',  # Correct engine for GIS support
        'NAME': os.environ.get('DATABASE_NAME'),
        'USER': os.environ.get('DATABASE_USER'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD'),
        'HOST': os.environ.get('DATABASE_HOST'),
        'PORT': os.environ.get('DATABASE_PORT'),
    }
}
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': os.path.join(BASE_DIR, 'dbbackup/')}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
PHONENUMBER_DB_FORMAT = "NATIONAL"
PHONENUMBER_DEFAULT_FORMAT = "E164"

# Durée de vie de la session en secondes (par exemple, 30 minutes)
SESSION_COOKIE_AGE = 60 * 60  # 60 minutes

# SESSION_COOKIE_AGE = 60 * 60 * 24 * 30
# Configurer pour que la session expire uniquement après inactivité
SESSION_SAVE_EVERY_REQUEST = False  # La session ne sera pas prolongée à chaque requête
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

ACCOUNT_ADAPTER = 'core.account_adapter.NoNewUsersAccountAdapter'
LOGOUT_REDIRECT_URL = 'account_login'
LOGIN_REDIRECT_URL = 'home'
# ACCOUNT_FORMS = {
#     'login': 'smit.forms.CustomLoginForm',
# }

ACCOUNT_LOGIN_METHODS = {'username'}
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # Vérification d'e-mail obligatoire
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/'
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/'
# ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
DJANGO_TABLES2_TEMPLATE = "django_tables2/bootstrap4.html"
#
AXES_FAILURE_LIMIT = 5  # Bloquer après 5 essais
AXES_COOLOFF_TIME = 1  # 1 heure d'attente après échec

ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_CHANGE_PASSWORD_REDIRECT_URL = "/accounts/password/change/"
ACCOUNT_RESET_PASSWORD_REDIRECT_URL = "/accounts/password/reset/done/"
#
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_HTTPONLY = True  # Empêche l’accès aux cookies via JavaScript
# SECURE_BROWSER_XSS_FILTER = True  # Protection contre XSS
# SECURE_CONTENT_TYPE_NOSNIFF = True  # Protection contre MIME sniffing
# SECURE_SSL_REDIRECT = True  # Redirige tout en HTTPS

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
#gdal-config --libs >---commande linux ou mac os

# GDAL_LIBRARY_PATH = os.getenv('GDAL_LIBRARY_PATH', '/opt/homebrew/opt/gdal/lib/libgdal.dylib')
# GEOS_LIBRARY_PATH = os.getenv('GEOS_LIBRARY_PATH', '/opt/homebrew/opt/geos/lib/libgeos_c.dylib')
LANGUAGES = [
    ('fr', 'Français'),
    ('en', 'English'),
]

SITE_ID = 1
USE_L10N = True
# USE_THOUSAND_SEPARATOR = True

TINYMCE_JS_URL = 'https://cdn.tiny.cloud/1/no-api-key/tinymce/7/tinymce.min.js'
TINYMCE_COMPRESSOR = False
TINYMCE_DEFAULT_CONFIG = {
    "height": "320px",
    "width": "auto",
    "menubar": "file edit view insert format tools table help",
    "plugins": "advlist autolink lists link image charmap print preview anchor searchreplace visualblocks code "
               "fullscreen insertdatetime media table paste code help wordcount spellchecker",
    "toolbar": "undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft "
               "aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor "
               "backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | "
               "fullscreen  preview save print | insertfile image media pageembed template link anchor codesample | "
               "a11ycheck ltr rtl | showcomments addcomment code",
    "custom_undo_redo_levels": 10,
    "language": "es_ES",  # To force a specific language instead of the Django current language.
}
TINYMCE_SPELLCHECKER = True
TINYMCE_EXTRA_MEDIA = {
    'css': {
        'all': [
            ...
        ],
    },
    'js': [
        ...
    ],
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fr-FR'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

SCHEDULER_ADMIN = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

BOWER_COMPONENTS_ROOT = os.path.join(BASE_DIR, 'components')

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_URL = '/smit-keneya/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
HANDLER403 = 'core.views.custom_403_view'

# Configuration de l'e-mail via fichier .env
EMAIL_BACKEND = config("EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend")
EMAIL_HOST = config("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = config("EMAIL_PORT", cast=int, default=587)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", cast=bool, default=True)
EMAIL_USE_SSL = config("EMAIL_USE_SSL", cast=bool, default=False)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default=EMAIL_HOST_USER)

TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.environ.get('messaging_service_sid')  # Numéro Twilio
TWILIO_MESSAGING_SERVICE_SID = os.environ.get('TWILIO_MESSAGING_SERVICE_SID')
# CACHES = {
#     "default": {
#         "BACKEND": "django.core.cache.backends.redis.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",
#     },
#     "select2": {
#         "BACKEND": "django.core.cache.backends.redis.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/2",
#     }
# }

# Tell select2 which cache configuration to use:
# SELECT2_CACHE_BACKEND = "select2"
