# Generated by Django 4.2.14 on 2025-01-16 11:42

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import smit.models
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pharmacy', '0001_initial'),
        ('core', '0002_initial'),
        ('schedule', '0014_use_autofields_for_pk'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Allergies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(blank=True, max_length=255, null=True)),
                ('descriptif', models.CharField(blank=True, max_length=255, null=True)),
                ('date_debut', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Analyse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name="Nom de l'analyse")),
                ('nbrb', models.PositiveIntegerField(blank=True, default=100, null=True)),
                ('tarif_base', models.PositiveIntegerField(blank=True, default=100, null=True)),
                ('tarif_public', models.PositiveIntegerField(blank=True, null=True)),
                ('tarif_mutuelle', models.PositiveIntegerField(blank=True, null=True)),
                ('forfait_assurance', models.PositiveIntegerField(blank=True, null=True)),
                ('forfait_societe', models.PositiveIntegerField(blank=True, null=True)),
                ('lanema', models.PositiveIntegerField(blank=True, null=True)),
                ('analysis_description', tinymce.models.HTMLField(blank=True, null=True)),
                ('analysis_method', models.CharField(blank=True, max_length=50, null=True)),
                ('delai_analyse', models.PositiveIntegerField(blank=True, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AntecedentsMedicaux',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('descriptif', models.CharField(blank=True, max_length=255, null=True)),
                ('date_debut', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('reason', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('Scheduled', 'Scheduled'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calendar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schedule.calendar')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments_creator', to='core.employee')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.employee')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schedule.event')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.service')),
            ],
        ),
        migrations.CreateModel(
            name='BoxHospitalisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacite', models.PositiveIntegerField(default=1)),
                ('nom', models.CharField(max_length=100)),
                ('occuper', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Constante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tension_systolique', models.IntegerField(blank=True, null=True, verbose_name='Tension artérielle systolique')),
                ('tension_diastolique', models.IntegerField(blank=True, null=True, verbose_name='Tension artérielle diastolique')),
                ('frequence_cardiaque', models.IntegerField(blank=True, null=True, verbose_name='Fréquence cardiaque')),
                ('frequence_respiratoire', models.IntegerField(blank=True, null=True, verbose_name='Fréquence respiratoire')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='Température')),
                ('saturation_oxygene', models.IntegerField(blank=True, null=True, verbose_name='Saturation en oxygène')),
                ('glycemie', models.FloatField(blank=True, null=True, verbose_name='Glycémie')),
                ('poids', models.FloatField(blank=True, null=True, verbose_name='Poids')),
                ('taille', models.FloatField(blank=True, null=True, verbose_name='Taille')),
                ('pouls', models.FloatField(blank=True, null=True, verbose_name='Pouls')),
                ('imc', models.FloatField(blank=True, editable=False, null=True, verbose_name='IMC')),
                ('pb', models.FloatField(blank=True, null=True, verbose_name='Périmètre Braciale')),
                ('po', models.FloatField(blank=True, null=True, verbose_name='Périmètre Ombilicale')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='constantes_creator', to='core.employee')),
            ],
            options={
                'verbose_name': 'Constante',
                'verbose_name_plural': 'Constantes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Consultation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numeros', models.CharField(default=smit.models.consult_number, max_length=300, unique=True)),
                ('consultation_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('reason', models.TextField(blank=True, null=True)),
                ('diagnosis', models.CharField(blank=True, max_length=300, null=True)),
                ('commentaires', models.CharField(blank=True, max_length=300, null=True)),
                ('status', models.CharField(blank=True, choices=[('Scheduled', 'Scheduled'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled')], max_length=50, null=True)),
                ('hospitalised', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('requested_at', models.DateTimeField(blank=True, null=True)),
                ('motifrejet', models.CharField(blank=True, max_length=300, null=True)),
                ('validated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activite', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='acti_consultations', to='core.servicesubactivity')),
                ('allergies', models.ManyToManyField(blank=True, related_name='patientallergies', to='smit.allergies')),
                ('antecedentsMedicaux', models.ManyToManyField(blank=True, related_name='patientantecedents', to='smit.antecedentsmedicaux')),
                ('constante', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patientconstantes', to='smit.constante')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consultation_creator', to='core.employee')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consultations', to='core.employee')),
            ],
        ),
        migrations.CreateModel(
            name='Examen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_number', models.CharField(default=smit.models.request_number, max_length=100, unique=True)),
                ('number', models.CharField(blank=True, max_length=300, null=True)),
                ('delivered_by', models.CharField(blank=True, max_length=300, null=True)),
                ('delivered_contact', models.CharField(blank=True, max_length=300, null=True)),
                ('delivered_services', models.CharField(blank=True, max_length=300, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('accepted', models.BooleanField(blank=True, default=False, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analyses', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='examanalyse', to='smit.analyse', verbose_name="Type d'analyse")),
                ('consultation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='examen_for_consultation', to='smit.consultation')),
                ('patients_requested', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.patient', verbose_name='patients')),
            ],
        ),
        migrations.CreateModel(
            name='Hospitalization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admission_date', models.DateTimeField()),
                ('discharge_date', models.DateTimeField(blank=True, null=True)),
                ('discharge_reason', models.CharField(blank=True, max_length=700, null=True)),
                ('room', models.CharField(max_length=500)),
                ('reason_for_admission', models.TextField()),
                ('status', models.CharField(blank=True, choices=[('Admis', 'Admis'), ('Sorti', 'Sorti'), ('Gueris-EXEA', 'Gueris-EXEA'), ('Transféré-TRANSF', 'Transféré-TRANSF'), ('SCAM', 'SCAM'), ('EVADE', 'EVADE'), ('DCD', 'DCD'), ('Sous observation', 'Sous observation'), ('Sous traitement', 'Sous traitement'), ('Chirurgie programmée', 'Chirurgie programmée'), ('En chirurgie', 'En chirurgie'), ('Récupération post-opératoire', 'Récupération post-opératoire'), ('USI', 'Unité de soins intensifs (USI)'), ('Urgence', 'Urgence'), ('Consultation externe', 'Consultation externe'), ('Réhabilitation', 'Réhabilitation'), ('En attente de diagnostic', 'En attente de diagnostic'), ('Traitement en cours', 'Traitement en cours'), ('Suivi programmé', 'Suivi programmé'), ('Consultation', 'Consultation'), ('Sortie en attente', 'Sortie en attente'), ('Isolement', 'Isolement'), ('Ambulantoire', 'Ambulantoire'), ('Aucun', 'Aucun')], max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activite', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='acti_hospitalied', to='core.servicesubactivity')),
            ],
        ),
        migrations.CreateModel(
            name='MaladieOpportuniste',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('posology', models.CharField(blank=True, choices=[('Une fois par jour', 'Une fois par jour'), ('Deux fois par jour', 'Deux fois par jour'), ('Trois fois par jour', 'Trois fois par jour'), ('Quatre fois par jour', 'Quatre fois par jour'), ('Toutes les 4 heures', 'Toutes les 4 heures'), ('Toutes les 6 heures', 'Toutes les 6 heures'), ('Toutes les 8 heures', 'Toutes les 8 heures'), ('Si besoin', 'Si besoin'), ('Avant les repas', 'Avant les repas'), ('Après les repas', 'Après les repas'), ('Au coucher', 'Au coucher'), ('Une fois par semaine', 'Une fois par semaine'), ('Deux fois par semaine', 'Deux fois par semaine'), ('Un jour sur deux', 'Un jour sur deux')], max_length=350, null=True)),
                ('pendant', models.CharField(blank=True, choices=[('1', '1 jour'), ('2', '2 jours'), ('3', '3 jours'), ('4', '4 jours'), ('5', '5 jours'), ('7', '1 semaine'), ('14', '2 semaines'), ('21', '3 semaines'), ('30', '1 mois')], max_length=350, null=True)),
                ('a_partir_de', models.CharField(blank=True, choices=[('1', '1 heure'), ('2', '2 heures'), ('3', '3 heures'), ('4', '4 heures'), ('6', '6 heures'), ('8', '8 heures'), ('12', '12 heures'), ('24', '24 heures'), ('48', '48 heures'), ('72', '72 heures')], max_length=350, null=True)),
                ('prescribed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Dispensed', 'Dispensed'), ('Cancelled', 'Cancelled')], max_length=50)),
                ('executed_at', models.DateTimeField(blank=True, null=True)),
                ('observations', models.TextField(blank=True, help_text="Notes ou observations lors de l'exécution.", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prescription_creator', to='core.employee')),
                ('doctor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prescriptions', to='core.employee')),
                ('executed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='executed_prescriptions', to='core.employee')),
                ('hospitalisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hospiprescriptions', to='smit.hospitalization')),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pharmacy.medicament')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Protocole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('duree', models.PositiveIntegerField(blank=True, null=True)),
                ('date_debut', models.DateField(blank=True, null=True)),
                ('date_fin', models.DateField(blank=True, null=True)),
                ('examens', models.ManyToManyField(blank=True, related_name='protocolesexam', to='smit.examen', verbose_name='Examens requis')),
                ('maladies', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='protocolesmaladies', to='core.maladie', verbose_name='Maladies traitées')),
                ('medicament', models.ManyToManyField(blank=True, to='pharmacy.medicament', verbose_name='Médicaments et posologies')),
                ('molecules', models.ManyToManyField(to='pharmacy.molecule')),
            ],
        ),
        migrations.CreateModel(
            name='Suivi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(blank=True, choices=[('permanent', 'Permanent'), ('occasionnel', 'Occasionnel'), ('periodique', 'Periodique')], max_length=50, null=True)),
                ('date_suivi', models.DateField(blank=True, null=True, verbose_name='Date du suivi')),
                ('statut_patient', models.CharField(choices=[('actif', 'Actif'), ('perdu_de_vue', 'Perdu de vue'), ('transferé', 'Transféré'), ('décédé', 'Décédé')], default='actif', max_length=50, verbose_name='Statut du patient')),
                ('adherence_traitement', models.CharField(choices=[('bonne', 'Bonne'), ('moyenne', 'Moyenne'), ('faible', 'Faible')], default='bonne', max_length=20, verbose_name='Adhérence au traitement')),
                ('poids', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Poids du patient (kg)')),
                ('cd4', models.PositiveIntegerField(blank=True, null=True, verbose_name='Taux de CD4')),
                ('charge_virale', models.PositiveIntegerField(blank=True, null=True, verbose_name='Charge virale')),
                ('observations', models.TextField(blank=True, null=True, verbose_name='Observations générales')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activite', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='suiviactivitepat', to='core.servicesubactivity', verbose_name='Activité')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suivimedecin', to='core.patient', verbose_name='Patient')),
                ('rdvconsult', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='suivierdvconsult', to='smit.appointment', verbose_name='Rendez-vous de consultation')),
                ('rdvpharmacie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='suivierdvpharma', to='pharmacy.rendezvous', verbose_name='Rendez-vous en pharmacie')),
                ('services', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='servicesuivipat', to='core.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Suivi de patient VIH',
                'verbose_name_plural': 'Suivis de patients VIH',
                'ordering': ['-date_suivi'],
            },
        ),
        migrations.CreateModel(
            name='TypeAntecedent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='UniteHospitalisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('capacite', models.PositiveIntegerField(default=1)),
                ('type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='WaitingRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arrival_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('Waiting', 'Waiting'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('medecin', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='waiting_rooms', to='core.employee')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='waiting_rooms', to='core.service')),
            ],
        ),
        migrations.CreateModel(
            name='Vaccination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_vaccin', models.CharField(help_text='Exemple : Hépatite B, Pneumocoque, Grippe, etc.', max_length=255, verbose_name='Type de vaccin')),
                ('date_administration', models.DateField(verbose_name="Date d'administration")),
                ('centre_vaccination', models.CharField(blank=True, help_text='Lieu où la vaccination a été administrée.', max_length=255, null=True, verbose_name='Centre de vaccination')),
                ('lot_vaccin', models.CharField(blank=True, help_text='Numéro de lot pour traçabilité.', max_length=100, null=True, verbose_name='Numéro de lot du vaccin')),
                ('professionnel_sante', models.CharField(blank=True, help_text='Nom ou identifiant du professionnel ayant administré le vaccin.', max_length=255, null=True, verbose_name='Professionnel de santé')),
                ('rappel_necessaire', models.BooleanField(default=False, help_text='Indique si un rappel est nécessaire pour ce vaccin.', verbose_name='Rappel nécessaire')),
                ('date_rappel', models.DateField(blank=True, help_text='Date prévue pour le rappel, si applicable.', null=True, verbose_name='Date de rappel')),
                ('effets_secondaires', models.TextField(blank=True, help_text="Décrire les effets secondaires éventuels observés après l'administration du vaccin.", null=True, verbose_name='Effets secondaires signalés')),
                ('remarques', models.TextField(blank=True, help_text='Informations supplémentaires concernant la vaccination.', null=True, verbose_name='Remarques')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vaccinations', to='core.patient', verbose_name='Patient')),
            ],
            options={
                'verbose_name': 'Vaccination',
                'verbose_name_plural': 'Vaccinations',
                'ordering': ['-date_administration'],
            },
        ),
        migrations.CreateModel(
            name='TypeProtocole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom du type de protocole')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='type_protocoles', to='smit.typeprotocole')),
            ],
        ),
        migrations.CreateModel(
            name='TraitementARV',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nom du traitement ARV')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('dosage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Dosage recommandé')),
                ('forme_pharmaceutique', models.CharField(blank=True, choices=[('comprimé', 'Comprimé'), ('solution_orale', 'Solution orale'), ('injectable', 'Injectable')], max_length=50, null=True, verbose_name='Forme pharmaceutique')),
                ('type_traitement', models.CharField(blank=True, choices=[('première_ligne', 'Traitement de première ligne'), ('deuxième_ligne', 'Traitement de deuxième ligne'), ('troisième_ligne', 'Traitement de troisième ligne')], default='première_ligne', max_length=50, null=True, verbose_name='Type de traitement')),
                ('duree_traitement', models.PositiveIntegerField(blank=True, null=True, verbose_name='Durée du traitement (en mois)')),
                ('posologie_details', models.TextField(blank=True, null=True, verbose_name='Détails sur la posologie')),
                ('effet_secondaire_courant', models.TextField(blank=True, null=True, verbose_name='Effets secondaires courants')),
                ('interaction_medicamenteuse', models.TextField(blank=True, null=True, verbose_name='Interactions médicamenteuses connues')),
                ('efficacite', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Efficacité estimée (%)')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patientarv', to='core.patient', verbose_name='Patient')),
                ('suivi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='suivitreatarv', to='smit.suivi', verbose_name='Détails du suivi')),
            ],
            options={
                'verbose_name': 'Traitement ARV',
                'verbose_name_plural': 'Traitements ARV',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='TestRapideVIH',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_test', models.DateTimeField(auto_now_add=True)),
                ('resultat', models.CharField(choices=[('POSITIF', 'Positif'), ('NEGATIF', 'Négatif')], max_length=20)),
                ('laboratoire', models.CharField(max_length=100)),
                ('test_type', models.CharField(blank=True, choices=[], max_length=100, null=True)),
                ('commentaire', models.TextField(blank=True, null=True)),
                ('consultation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tests_for_consultation_vih', to='smit.consultation')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests_rapides_vih', to='core.patient')),
            ],
            options={
                'verbose_name': 'Test Rapide VIH',
                'verbose_name_plural': 'Tests Rapides VIH',
            },
        ),
        migrations.CreateModel(
            name='Symptomes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('descriptif', models.CharField(blank=True, max_length=255, null=True)),
                ('date_debut', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='SuiviProtocole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_debut', models.DateField(blank=True, null=True)),
                ('date_fin', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='suivicreator', to='core.employee')),
                ('protocole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='etapes', to='smit.protocole')),
                ('suivi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='protocolessuivi', to='smit.suivi')),
            ],
        ),
        migrations.CreateModel(
            name='SigneFonctionnel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, unique=True)),
                ('valeure', models.CharField(choices=[('oui', 'oui'), ('non', 'non')], max_length=255)),
                ('hospitalisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signefonctionnels', to='smit.hospitalization')),
            ],
        ),
        migrations.AddField(
            model_name='protocole',
            name='type_protocole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='smit.typeprotocole'),
        ),
        migrations.CreateModel(
            name='PrescriptionExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_time', models.DateTimeField()),
                ('executed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Taken', 'Taken'), ('Missed', 'Missed')], default='Pending', max_length=50)),
                ('observations', models.TextField(blank=True, null=True)),
                ('executed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='executed_meds', to='core.employee')),
                ('prescription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='smit.prescription')),
            ],
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_enregistrement', models.DateTimeField(auto_now_add=True)),
                ('details', models.TextField(null=True)),
                ('statut', models.CharField(choices=[('Initiale', 'Initiale'), ('Intermédiaire', 'Intermédiaire'), ('Finale', 'Finale')], default='Initiale', max_length=50)),
                ('hospitalisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hospiobservations', to='smit.hospitalization')),
                ('medecin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='observations', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='LitHospitalisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(default='lit', max_length=100)),
                ('occuper', models.BooleanField(default=False)),
                ('reserved', models.BooleanField(default=False)),
                ('reserved_until', models.DateTimeField(blank=True, null=True)),
                ('is_out_of_service', models.BooleanField(default=False)),
                ('is_cleaning', models.BooleanField(default=False)),
                ('status_changed_at', models.DateTimeField(blank=True, null=True)),
                ('box', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lits', to='smit.boxhospitalisation')),
                ('occupant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.patient')),
                ('reserved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.employee')),
            ],
        ),
        migrations.CreateModel(
            name='InfectionOpportuniste',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_infection', models.CharField(max_length=255, verbose_name="Type d'infection")),
                ('date_diagnostic', models.DateField(verbose_name='Date de diagnostic')),
                ('gravite', models.CharField(choices=[('faible', 'Faible'), ('modérée', 'Modérée'), ('sévère', 'Sévère')], default='faible', max_length=20, verbose_name='Gravité')),
                ('traitement', models.TextField(blank=True, null=True, verbose_name='Traitement')),
                ('statut_traitement', models.CharField(choices=[('en cours', 'En cours'), ('terminé', 'Terminé'), ('abandonné', 'Abandonné')], default='en cours', max_length=20, verbose_name='Statut du traitement')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infections_opportunistes', to='core.patient', verbose_name='Patient')),
                ('suivi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='suiviinfections', to='smit.suivi', verbose_name='Détails du suivi')),
            ],
            options={
                'verbose_name': 'Infection Opportuniste',
                'verbose_name_plural': 'Infections Opportunistes',
                'ordering': ['-date_diagnostic'],
            },
        ),
        migrations.CreateModel(
            name='IndicateurSubjectif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today)),
                ('bien_etre', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], null=True)),
                ('hospitalisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indicateurs_subjectifs', to='smit.hospitalization')),
            ],
        ),
        migrations.CreateModel(
            name='IndicateurFonctionnel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today)),
                ('mobilite', models.CharField(blank=True, choices=[('indépendant', 'Indépendant'), ('assisté', 'Assisté'), ('immobile', 'Immobile')], max_length=50, null=True)),
                ('conscience', models.CharField(blank=True, choices=[('alerte', 'Alerte'), ('somnolent', 'Somnolent'), ('inconscient', 'Inconscient')], max_length=50, null=True)),
                ('debit_urinaire', models.DecimalField(blank=True, decimal_places=2, help_text='Litres', max_digits=5, null=True)),
                ('hospitalisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indicateurs_fonctionnels', to='smit.hospitalization')),
            ],
        ),
        migrations.CreateModel(
            name='IndicateurBiologique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today)),
                ('globules_blancs', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('hemoglobine', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('plaquettes', models.IntegerField(blank=True, null=True)),
                ('crp', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('glucose_sanguin', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('hospitalisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indicateurs_biologiques', to='smit.hospitalization')),
            ],
        ),
        migrations.CreateModel(
            name='HospitalizationIndicators',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField(blank=True, help_text='Température en degrés Celsius', null=True)),
                ('heart_rate', models.IntegerField(blank=True, help_text='Fréquence cardiaque (bpm)', null=True)),
                ('respiratory_rate', models.IntegerField(blank=True, help_text='Fréquence respiratoire (rpm)', null=True)),
                ('blood_pressure', models.CharField(blank=True, help_text='Tension artérielle (ex : 120/80 mmHg)', max_length=20, null=True)),
                ('pain_level', models.IntegerField(blank=True, help_text='Niveau de douleur sur une échelle de 1 à 10', null=True)),
                ('mental_state', models.CharField(blank=True, choices=[('clair', 'Clair'), ('confusion', 'Confusion'), ('somnolent', 'Somnolent')], help_text='État de conscience du patient', max_length=20, null=True)),
                ('treatment_response', models.TextField(blank=True, help_text='Réponse du patient au traitement', null=True)),
                ('side_effects', models.TextField(blank=True, help_text='Effets secondaires observés', null=True)),
                ('compliance', models.BooleanField(default=False, help_text='Observance du traitement')),
                ('electrolytes_balance', models.CharField(blank=True, help_text='Équilibre électrolytique', max_length=50, null=True)),
                ('renal_function', models.CharField(blank=True, help_text='État de la fonction rénale', max_length=50, null=True)),
                ('hepatic_function', models.CharField(blank=True, help_text='État de la fonction hépatique', max_length=50, null=True)),
                ('stable_vitals', models.BooleanField(default=False, help_text='Les signes vitaux sont-ils stables?')),
                ('pain_controlled', models.BooleanField(default=False, help_text='La douleur est-elle contrôlée?')),
                ('functional_ability', models.BooleanField(default=False, help_text='Capacité fonctionnelle atteinte?')),
                ('mental_stability', models.BooleanField(default=False, help_text='État mental stable?')),
                ('follow_up_plan', models.TextField(blank=True, help_text='Plan de suivi post-hospitalisation', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hospitalisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='indicateurs_autres', to='smit.hospitalization')),
            ],
        ),
        migrations.AddField(
            model_name='hospitalization',
            name='bed',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lit_hospy', to='smit.lithospitalisation'),
        ),
        migrations.AddField(
            model_name='hospitalization',
            name='doctor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hospitaliza_doctor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='hospitalization',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hospitalized', to='core.patient'),
        ),
        migrations.CreateModel(
            name='HistoriqueMaladie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_enregistrement', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('antecedents', models.TextField(blank=True, null=True)),
                ('diagnostics_associes', models.TextField(blank=True, null=True)),
                ('traitements_precedents', models.TextField(blank=True, null=True)),
                ('observations', models.TextField(blank=True, null=True)),
                ('hospitalisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='historique_maladie_hospi', to='smit.hospitalization')),
                ('medecin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='historiques_maladie', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='historiques_maladie', to='core.patient')),
            ],
            options={
                'verbose_name': 'Historique de la Maladie',
                'verbose_name_plural': 'Historiques de Maladies',
                'ordering': ['-date_enregistrement'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalAnalyse',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name="Nom de l'analyse")),
                ('nbrb', models.PositiveIntegerField(blank=True, default=100, null=True)),
                ('tarif_base', models.PositiveIntegerField(blank=True, default=100, null=True)),
                ('tarif_public', models.PositiveIntegerField(blank=True, null=True)),
                ('tarif_mutuelle', models.PositiveIntegerField(blank=True, null=True)),
                ('forfait_assurance', models.PositiveIntegerField(blank=True, null=True)),
                ('forfait_societe', models.PositiveIntegerField(blank=True, null=True)),
                ('lanema', models.PositiveIntegerField(blank=True, null=True)),
                ('analysis_description', tinymce.models.HTMLField(blank=True, null=True)),
                ('analysis_method', models.CharField(blank=True, max_length=50, null=True)),
                ('delai_analyse', models.PositiveIntegerField(blank=True, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical analyse',
                'verbose_name_plural': 'historical analyses',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='FicheSuiviClinique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_consultation', models.DateField(help_text='Date de la consultation.')),
                ('heure_consultation', models.TimeField(blank=True, help_text='Heure de la consultation.', null=True)),
                ('observations_cliniques', models.TextField(blank=True, help_text='Observations cliniques du médecin.', null=True)),
                ('poids', models.DecimalField(blank=True, decimal_places=2, help_text='Poids du patient en kg.', max_digits=5, null=True)),
                ('taille', models.DecimalField(blank=True, decimal_places=2, help_text='Taille du patient en cm.', max_digits=5, null=True)),
                ('pression_arterielle', models.CharField(blank=True, help_text='Exemple : 120/80 mmHg', max_length=20, null=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Température corporelle en °C.', max_digits=4, null=True)),
                ('recommandations', models.TextField(blank=True, help_text='Recommandations du médecin pour le patient.', null=True)),
                ('prochaine_consultation', models.DateField(blank=True, help_text='Date de la prochaine consultation prévue.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('medecin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fichemedecinsuivi', to='core.employee')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultations', to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_evaluation', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('etat_patient', models.CharField(blank=True, max_length=255, null=True)),
                ('etape', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='smit.suiviprotocole')),
            ],
        ),
        migrations.CreateModel(
            name='EnqueteVih',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prophylaxie_antiretrovirale', models.BooleanField(default=False)),
                ('prophylaxie_type', models.CharField(blank=True, max_length=255, null=True)),
                ('traitement_antiretrovirale', models.BooleanField(default=False)),
                ('traitement_type', models.CharField(blank=True, max_length=255, null=True)),
                ('dernier_regime_antiretrovirale', models.BooleanField(default=False)),
                ('dernier_regime_antiretrovirale_type', models.CharField(blank=True, max_length=255, null=True)),
                ('traitement_prophylactique_cotrimoxazole', models.BooleanField(default=False)),
                ('evolutif_cdc_1993', models.CharField(blank=True, choices=[('Adulte Stade A', 'Adulte Stade A'), ('Adulte Stade B', 'Adulte Stade B'), ('Adulte Stade C', 'Adulte Stade C'), ('Enfant Stade N', 'Enfant Stade N'), ('Enfant Stade A', 'Enfant Stade A'), ('Enfant Stade B', 'Enfant Stade B'), ('Enfant Stade C', 'Enfant Stade C')], max_length=255, null=True)),
                ('sous_traitement', models.BooleanField(default=False)),
                ('score_karnofsky', models.IntegerField(blank=True, null=True)),
                ('descriptif', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('antecedents', models.ManyToManyField(related_name='antecedents_vih', to='smit.maladieopportuniste')),
                ('consultation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enqueteconsultation', to='smit.consultation')),
                ('infection_opportuniste', models.ManyToManyField(related_name='infection_opportuniste', to='smit.maladieopportuniste')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enquetevihs', to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Emergency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arrival_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('Waiting', 'Waiting'), ('In Progress', 'In Progress'), ('Resolved', 'Resolved'), ('Referred', 'Referred')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='emergencies', to='core.employee')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='EffetIndesirable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('gravite', models.CharField(choices=[('Léger', 'Léger'), ('Modéré', 'Modéré'), ('Grave', 'Grave')], default='Léger', max_length=50)),
                ('date_apparition', models.DateField()),
                ('observations', models.TextField(blank=True, null=True)),
                ('date_signalement', models.DateTimeField(auto_now_add=True)),
                ('hospitalisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effets_indesirables', to='smit.hospitalization')),
                ('medecin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='effets_indesirables', to=settings.AUTH_USER_MODEL)),
                ('medicament_associe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pharmacy.medicament')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effets_indesirables', to='core.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Diagnostic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_diagnostic', models.CharField(choices=[('secondaire', 'Secondaire'), ('fonctionnel', 'Fonctionnel'), ('complication', 'Complication'), ('probable', 'Probable'), ('final', 'Final')], max_length=20)),
                ('nom', models.CharField(max_length=255)),
                ('date_diagnostic', models.DateTimeField()),
                ('remarques', models.TextField(blank=True, null=True)),
                ('hospitalisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnostics', to='smit.hospitalization')),
                ('maladie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='maladiediagnostics', to='core.maladie')),
                ('medecin_responsable', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='consultation',
            name='examens',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patientexamens', to='smit.examen'),
        ),
        migrations.AddField(
            model_name='consultation',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient'),
        ),
        migrations.AddField(
            model_name='consultation',
            name='services',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consultations', to='core.service'),
        ),
        migrations.AddField(
            model_name='consultation',
            name='suivi',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='suivi', to='core.service'),
        ),
        migrations.AddField(
            model_name='consultation',
            name='symptomes',
            field=models.ManyToManyField(blank=True, related_name='patientsymptomes', to='smit.symptomes'),
        ),
        migrations.AddField(
            model_name='constante',
            name='hospitalisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hospiconstantes', to='smit.hospitalization'),
        ),
        migrations.AddField(
            model_name='constante',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='constantes', to='core.patient'),
        ),
        migrations.CreateModel(
            name='ComplicationsIndicators',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sodium', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('potassium', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('chlorure', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('calcium', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('magnesium', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('phosphate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('creatinine', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('bun', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('alt', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ast', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('bilirubine_totale', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('albumine', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('alp', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('hospitalisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='indicateurs_compliques', to='smit.hospitalization')),
            ],
        ),
        migrations.CreateModel(
            name='Comorbidite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_comorbidite', models.CharField(max_length=255, verbose_name='Type de comorbidité')),
                ('date_diagnostic', models.DateField(verbose_name='Date de diagnostic')),
                ('traitement', models.TextField(blank=True, null=True, verbose_name='Traitement')),
                ('statut_traitement', models.CharField(choices=[('en cours', 'En cours'), ('terminé', 'Terminé'), ('abandonné', 'Abandonné')], default='en cours', max_length=20, verbose_name='Statut du traitement')),
                ('impact_sur_vih', models.TextField(blank=True, help_text='Expliquez comment cette comorbidité influence la gestion du VIH.', null=True, verbose_name='Impact sur le VIH')),
                ('recommandations', models.TextField(blank=True, help_text='Recommandations spécifiques liées à cette comorbidité.', null=True, verbose_name='Recommandations')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comorbidites', to='core.patient', verbose_name='Patient')),
                ('suivi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='suivicomorbide', to='smit.suivi', verbose_name='Détails du suivi')),
            ],
            options={
                'verbose_name': 'Comorbidité',
                'verbose_name_plural': 'Comorbidités',
                'ordering': ['-date_diagnostic'],
            },
        ),
        migrations.CreateModel(
            name='CommentaireInfirmier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_commentaire', models.DateTimeField(auto_now_add=True)),
                ('contenu', models.TextField()),
                ('hospitalisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hospicomment', to='smit.hospitalization')),
                ('medecin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medecincomment', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='commentpatient', to='core.patient')),
            ],
            options={
                'verbose_name': 'Commentaire Infirmier',
                'verbose_name_plural': 'Commentaires Infirmiers',
                'ordering': ['-date_commentaire'],
            },
        ),
        migrations.CreateModel(
            name='ChambreHospitalisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('unite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chambres', to='smit.unitehospitalisation')),
            ],
        ),
        migrations.AddField(
            model_name='boxhospitalisation',
            name='chambre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boxes', to='smit.chambrehospitalisation'),
        ),
        migrations.AddField(
            model_name='boxhospitalisation',
            name='occupant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.patient'),
        ),
        migrations.CreateModel(
            name='AvisMedical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=255)),
                ('contenu', models.TextField(blank=True, null=True)),
                ('date_avis', models.DateTimeField(auto_now_add=True)),
                ('mise_a_jour', models.DateTimeField(auto_now=True)),
                ('hospitalisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avis_medicaux', to='smit.hospitalization')),
                ('medecin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='avis_medicaux', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='antecedentsmedicaux',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='smit.typeantecedent'),
        ),
    ]
